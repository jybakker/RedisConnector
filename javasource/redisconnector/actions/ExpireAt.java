// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;

/**
 * EXPIREAT key timestamp
 * 
 * Available since 1.2.0.
 * Time complexity: O(1)
 * EXPIREAT has the same effect and semantic as EXPIRE, but instead of specifying the number of seconds representing the TTL (time to live), it takes an absolute Unix timestamp (seconds since January 1, 1970). A timestamp in the past will delete the key immediately.
 * Please for the specific semantics of the command refer to the documentation of EXPIRE.
 * Background
 * EXPIREAT was introduced in order to convert relative timeouts to absolute timeouts for the AOF persistence mode. Of course, it can be used directly to specify that a given key should expire at a given time in the future.
 * Return value
 * Integer reply, specifically:
 * 1 if the timeout was set.
 * 0 if key does not exist or the timeout could not be set (see: EXPIRE).
 * Examples
 * redis> SET mykey "Hello"
 * "OK"
 * redis> EXISTS mykey
 * (integer) 1
 * redis> EXPIREAT mykey 1293840000
 * (integer) 1
 * redis> EXISTS mykey
 * (integer) 0
 * redis>
 */
public class ExpireAt extends CustomJavaAction<Long>
{
	private String key;
	private Long timestamp;

	public ExpireAt(IContext context, String key, Long timestamp)
	{
		super(context);
		this.key = key;
		this.timestamp = timestamp;
	}

	@Override
	public Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector(); 
		return redisconnector.expireAt(key, timestamp);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "ExpireAt";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
